
                  План по проекту авторизации

1. Инициировать проект, добавить зависимости express, nodemon
2. Сделать кластер в монго для бд
2. Создать простую экспресс апишку на порту, покдлючиться к бд, вписать нужные мидлвэйры
3. Создать Модельки ролей и пользователя
4. Сделать класс контроллера где будут 3 основные функции, регистрации, логина и получения юзера
5. Сделать функцию генерации токена




Аутентификация - простыми словами это сверка логина и пароля, и если все верно, тебя пропускают на сайт.
Авторизация - это проверка есть ли у тебя права на осуществлении каких-то действий.

2 самых популярных способа авторизации это:
- с помощью сессий
- с помощью токенов

Я рассматриваю авторизацию с помощью токенов, а конкретно JWT авторизацию

JWT (JSON Web Token) — это специальный формат токена, который позволяет безопасно передавать данные между клиентом и сервером.

JWT состоит из трех частей - заголовки (headers), полезные данные (payload) и подпись (signature).

Header содержит информацию о токене, тип самого токена и алгоритм шифрования
Payload - Json объект в котором мы передаем данные, например имя пользователя, его роль, истекает срок токена или нет
Signature - Подпись токена, которая проверяет что токен не был изменен 

Обычный токен имеет такой формат -  aaaaaaaaaaaaaaaa.bbbbbbbbbbbbb.cccccccccccc

Разберем подробнее части токена (Header, Payload и Signature)

----------------Header------------------
Header - заголовок обычно является Json объектом с двумя свойствами.
Тип токена (typ): в нашем случае JWT
Алгоритм шифрования(alg): в нашем случае HMAC SHA256

{
  "alg": "HS256",
  "typ": "JWT"
}

Дальше этот объект просто хешируется в компактную строку
-----------------------------------------


----------------Payload------------------
Payload - также представлен в виде Json Объекта, содержит различные данные о авторизованном пользователе.
В разных приложения значения payload могут быть разными
Мы можем записать здесь любые публичные данные, которые могут быть полезны при авторизации.
В нашем примере полезная нагрузка JWT-токена имеет следующее значение:

{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}

Названия некоторых полей могут показаться непонятными с первого взгляда.
Например, поле sub означает идентификатор пользователя, а поле iat — время создания токена. Это сделано чтобы сократить токен
Названия берутся не из ниоткуда, а есть стандартизация: https://www.iana.org/assignments/jwt/jwt.xhtml

Также как и Header, Payload хешируется в компактную строку
-------------------------------------------


----------------Signature------------------
Чтобы создать Signature (подпись), надо взять:

1. Закодированную компактную строку Header, 
2. Закодированную компактную строку Payload
3. Секретную строку (SECRET_KEY)

Зашифровать эти данные. При этом алгоритм шифрования берется из Header, Jwt токена
Подпись используются, чтобы проверить, что сообщение не было изменено при передаче.
Она также позволяет подтвердить, что отправитель JWT-токена является тем, кем он представляется.
-------------------------------------------

В результате генерации JWT-токена получаются три Base64-URL-закодированные строки
aaaaaaaaaaaaaaaa.bbbbbbbbbbbbb.cccccccccccc
Где a - это Header, b - Payload, c - Signature

----------------Алгоритм------------------
1. Клиент отправляет запрос к Апи с логином и паролем
2. Апи проверяет логин и пароль, и если они верны, то генерирует JWT-токен и отправляет его клиенту. 
При генерации JWT-токена клиент ставит подпись секретным ключом, который хранится только в на сервере
3. Клиент сохраняет JWT-токен и отправляет его вместе с каждым запросом на сервер
4. Сервер проверяет JWT-токен и если он верный, то выполняет действие от имени авторизованного пользователя

Подпись токена происходит с помощью шифрования. С помощью подписи веб-приложение проверяет, что токен действительно был сгенерирован им. 
Шифрование может осуществляться различными алгоритмами. Например, алгоритмом HS256 — HMAC с SHA-256.

